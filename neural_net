function [J, grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
Y = zeros(num_labels,m);
for i = 1:m
    Y(y(i,1),i)=1;
end         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

a1 = [ones(m,1) X];
a2 = sigmoid(Theta1*a1');
a2 = [ones(m,1) a2'];
a3 = sigmoid(Theta2*a2');
J= sum(sum(log(a3).*Y + log(1-a3).*(1-Y)));
sum1 = sum(Theta1.*Theta1);
sum2 = sum(Theta2.*Theta2);
J = J - (lambda/2)*(sum(sum1(2:end)) + sum(sum2(2:end)));
J = -J/m;

del3 = a3 - Y;
del2 = (Theta2'*del3).*a2'.*(1-a2');
del = zeros(size(Theta2));
delt = zeros(size(Theta1));
for i = 1:m
    del = del + del3(:,i)*a2(i,:);
    Theta2_grad = del + (lambda*Theta2);
    Theta2_grad(1:end,1) = del(1:end,1);    
end

for i = 1:m
    
    delt = delt + del2(2:end,i)*a1(i,:);
    Theta1_grad = delt + (lambda*Theta1) ;    
    Theta1_grad(1:end,1) = delt(1:end,1);
end

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)]/m;

end

%-----------------------------------------------------------------

function p = predict(Theta1, Theta2, X)
%PREDICT Predict the label of an input given a trained neural network
%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the
%   trained weights of a neural network (Theta1, Theta2)

% Useful values
m = size(X, 1);
num_labels = size(Theta2, 1);

p = zeros(size(X, 1), 1);

h1 = sigmoid([ones(m, 1) X] * Theta1');
h2 = sigmoid([ones(m, 1) h1] * Theta2');
[dummy, p] = max(h2, [], 2);

end

%------------------------------------------------------------------------

function g = sigmoid(z)
%SIGMOID Compute sigmoid functoon
%   J = SIGMOID(z) computes the sigmoid of z.

g = 1.0 ./ (1.0 + exp(-z));
end

%-----------------------------------------------------------------------

function W = randInitializeWeights(L_in, L_out)
%RANDINITIALIZEWEIGHTS Randomly initialize the weights of a layer with L_in
%incoming connections and L_out outgoing connections
%   W = RANDINITIALIZEWEIGHTS(L_in, L_out) randomly initializes the weights 
%   of a layer with L_in incoming connections and L_out outgoing 
%   connections. 
%
%   Note that W should be set to a matrix of size(L_out, 1 + L_in) as
%   the first column of W handles the "bias" terms
%

W = zeros(L_out, 1 + L_in);

epsilon = 0.12;
W = rand(L_out, L_in+1)*2*epsilon - epsilon;

end

%----------------------------------------------------------------------------

function g = sigmoidGradient(z)
%SIGMOIDGRADIENT returns the gradient of the sigmoid function
%evaluated at z
%   g = SIGMOIDGRADIENT(z) computes the gradient of the sigmoid function
%   evaluated at z. This should work regardless if z is a matrix or a
%   vector. In particular, if z is a vector or matrix, you should return
%   the gradient for each element.

g = zeros(size(z));

g = sigmoid(z).*(1-sigmoid(z));

end
